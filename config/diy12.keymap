#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define QUICK_TAP_MS 175

&lt {
    flavor = "tap-preferred";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
};

/ {
    behaviors {
        hm: home_row {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <25 26 27 28 31 32 33 34>;
            hold-trigger-on-release;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ------------------------------------------------------------------------------------------
            // |  ESC  |  1   |  2   |  3   |  4   |  5   |   6   |  7    |  8   |  9   |   0   | BSPC  |
            // |  TAB  |  Q   |  W   |  E   |  R   |  T   |   Y   |  U    |  I   |  O   |   P   |  \    |
            // | SHIFT |  A   |  S   |  D   |  F   |  G   |   H   |  J    |  K   |  L   |   ;   |  '    |
            // | CTRL  |  Z   |  X   |  C   |  V   |  B   |   N   |  M    |  ,   |  .   |   /   | ENTER |
            // |ADJUST | LCTL | LALT | LGUI | LOWR | SPACE| SPACE |  RAIS | LARW | DARW | UARW  | RARW  |

            bindings = <
&kp ESC    &kp N1        &kp N2        &kp N3           &kp N4       &kp N5      &kp N6  &kp N7       &kp N8       &kp N9         &kp N0    &kp BSPC
&kp TAB    &kp Q         &kp W         &kp E            &kp R        &kp T       &kp Y   &kp U        &kp I        &kp O          &kp P     &kp BSLH
&kp LCTRL  &kp A         &kp S         &kp D            &hm LCTRL F  &kp G       &kp H   &kp J        &kp K        &kp L          &kp SEMI  &kp SQT
&none      &kp LSHFT     &kp Z         &kp X            &kp C        &kp V       &kp B   &kp N        &kp M        &kp COMMA      &kp DOT   &kp FSLH
&none      &kp LEFT_GUI  &kp C_VOL_DN  &kp C_VOLUME_UP  &lt 1 DEL    &lt 2 BSPC  &none   &lt 3 ENTER  &lt 4 SPACE  &kp RIGHT_ALT  &kp LEFT  &kp RIGHT
            >;
        };

        number_layer {
            // -------------------------------------------------------------------------------------------
            // |  ESC  |  F2  |  F3  |  F4  |  F5  |  F6  |   F7  |  F8   |  F9  | F10  |  F11  |  F12  |
            // |   ~   |  !   |  @   |  #   |  $   |  %   |   ^   |   &   |  *   |  (   |   )   |  DEL  |
            // |       |  F1  |  F2  |  F3  |  F4  |  F5  |   F6  |   _   |  +   |  {   |   }   |   |   |
            // |       |  F7  |  F8  |  F9  |  F10 |  F11 |   F12 | LS(#) |LS(|) |      |       |       |
            // |       |      |      |      |      |      |       |       | NEXT | Vol- | Vol+ | PLAY   |

            bindings = <
&trans  &trans  &kp F10  &kp F11  &kp F12  &trans  &trans  &trans           &trans           &trans           &trans  &trans
&trans  &trans  &kp F7   &kp F8   &kp F9   &trans  &trans  &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &trans  &trans
&trans  &trans  &kp F4   &kp F5   &kp F6   &trans  &trans  &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &trans  &trans
&trans  &trans  &kp F1   &kp F2   &kp F3   &trans  &trans  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kt KP_NUMBER_3  &trans  &trans
&trans  &trans  &trans   &trans   &trans   &trans  &trans  &kt KP_NUMBER_0  &trans           &trans           &trans  &trans
            >;
        };

        nav_layer {
            // ------------------------------------------------------------------------------------------
            // |  ESC  |  F2  |  F3  |  F4  |  F5  |  F6  |  F7   |  F8   |  F9  | F10  |  F11  |  F12  |
            // |   ~   |  1   |  2   |  3   |  4   |  5   |  6    |   7   |  8   |  9   |   0   |  DEL  |
            // |  DEL  |  F1  |  F2  |  F3  |  F4  |  F5  |  F6   |   -   |  =   |  [   |   ]   |   \   |
            // |       |  F7  |  F8  |  F9  |  F10 |  F11 |  F12  |   #   |  |   |      |       |       |
            // |       |      |      |      |      |      |       |       |       |      |      |       |

            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans    &trans        &trans     &trans   &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans    &kp UP_ARROW  &trans     &trans   &trans
&trans  &trans  &trans  &trans  &trans  &trans  &kp HOME  &kp LEFT  &kp DOWN      &kp RIGHT  &kp END  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans    &trans        &trans     &trans   &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans    &trans        &trans     &trans   &trans
            >;
        };

        func_layer {
            // ------------------------------------------------------------------------------------------
            // |tog(4)|  F2  |  F3  |  F4  |  F5  |  F6  |  F7  |  F8  |  F9  |  F10 |  F11 |    F12    |
            // |      |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |LALT(PRTSN)|
            // |      |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |   PRTSN   |
            // |      |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |LCTRL(DEL) |
            // |      |      |      |      |      |BOOTLD|BOOTLD|      |      |      |      |           |

            bindings = <
&tog 4  &kp F2  &kp F3  &kp F4  &kp F5  &kp F6       &kp F7       &kp F8  &kp F9  &kp F10  &kp F11  &kp F12
&trans  &none   &none   &none   &none   &none        &none        &none   &none   &none    &none    &kp LA(PSCRN)
&trans  &none   &none   &none   &none   &none        &none        &none   &none   &none    &none    &kp PSCRN
&trans  &none   &none   &none   &none   &none        &none        &none   &none   &none    &none    &kp LC(DEL)
&trans  &trans  &trans  &trans  &trans  &bootloader  &bootloader  &trans  &trans  &trans   &trans   &trans
            >;
        };

        symbol_layer {
            bindings = <
&trans  &trans     &trans     &trans    &trans    &trans    &trans     &trans    &trans     &trans     &trans     &trans
&trans  &kp GRAVE  &kt EXCL   &kt AT    &kt HASH  &kt DLLR  &kt CARET  &kt AMPS  &kp BSLH   &kt PIPE   &kt PRCNT  &trans
&trans  &kt UNDER  &kp EQUAL  &kt LPAR  &kt RPAR  &kp APOS  &kt EQUAL  &kt PLUS  &kt ASTRK  &kt MINUS  &kt SLASH  &trans
&trans  &kt TILDE  &trans     &kp LBKT  &kp RBKT  &kt DQT   &trans     &kt LBRC  &kt RBRC   &kt LT     &kt GT     &trans
&trans  &trans     &trans     &trans    &trans    &trans    &trans     &trans    &trans     &trans     &trans     &trans
            >;
        };

        flock_layer {
            // ----------------------------------------------------------------------------------------------
            // |tog(4) |  F2    |   F3   |   F4   |   F5   |   F6   |  F7  |  F8  |  F9  | F10 | F11 |      |
            // |out tog|BT_SEL 0|BT_SEL 1|BT_SEL 2|BT_SEL 3|BT_SEL 4|BT_PRV|BT_NXT|BT_CLR|     |     |      |
            // |       |        |        |        |        |        |      |      |      |     |     |      |
            // |       |        |        |        |        |        |      |      |      |     |     |      |
            // |       |        |        |        |        |        |      |      |      |     |     |      |

            bindings = <
&trans        &trans        &trans        &trans        &trans        &trans        &trans      &trans      &trans      &trans  &trans  &trans
&out OUT_TOG  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_PRV  &bt BT_NXT  &bt BT_CLR  &trans  &trans  &trans
&trans        &trans        &trans        &trans        &trans        &trans        &trans      &trans      &trans      &trans  &trans  &trans
&trans        &trans        &trans        &trans        &trans        &trans        &trans      &trans      &trans      &trans  &trans  &trans
&trans        &trans        &trans        &trans        &trans        &trans        &trans      &trans      &trans      &trans  &trans  &trans
            >;
        };
    };
};
